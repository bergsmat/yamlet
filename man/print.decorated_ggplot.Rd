% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggplot.R
\name{print.decorated_ggplot}
\alias{print.decorated_ggplot}
\title{Substitute Expressions, Titles and Labels in ggplots}
\usage{
\method{print}{decorated_ggplot}(
  x,
  ...,
  search = getOption("resolved_ggplot_search", c("expression", "title", "label"))
)
}
\arguments{
\item{x}{class 'decorated_ggplot' from \code{\link{ggplot.decorated}}}

\item{...}{passed arguments}

\item{search}{attribute names from which to seek label substitutes}
}
\value{
see \code{\link[ggplot2]{print.ggplot}}
}
\description{
At time of printing, default labels will be used as
column names to search \code{data} for more meaningful
labels, taking first available from attributes
with names in \code{search}.
}
\examples{
file <- system.file(package = 'yamlet', 'extdata','quinidine.csv')
library(ggplot2)
library(dplyr)
library(magrittr)
# par(ask = FALSE)

x <- decorate(file)
x \%<>\% filter(!is.na(conc))
class(x)

class(data.frame(x))

# The bare data.frame gives boring labels, unordered groups.
data.frame(x) \%>\% ggplot(aes(x = time, y = conc, color = Heart)) +
geom_point()

# Decorated data.frame uses supplied labels.
# Notice CHF levels are still not ordered.
x \%>\% ggplot(aes(x = time, y = conc, color = Heart)) + geom_point()

# We can resolve guide for a chance to enrich the output with units.
# Notice CHF levels are now ordered.
x \%<>\% resolve
suppressWarnings(
  x <- modify(x, title = paste0(label, '\n(', units, ')'))
)
x \%>\% ggplot(aes(x = time, y = conc, color = Heart)) + geom_point()

# Or something fancier.
x \%<>\% modify(conc, title = 'conc_serum. (mg*L^-1.)')
x \%>\% ggplot(aes(x = time, y = conc, color = Heart)) + geom_point()

# Now render that expression, which was given in spork syntax:
library(spork)
x \%<>\% modify(conc, expression = as.expression(as_plotmath(as_spork(title))))
x \%>\% ggplot(aes(x = time, y = conc, color = Heart)) + geom_point()
# Similarly, add a fancy label for Heart, and facet by a factor:
x \%<>\% modify(Heart, expression = as.expression(as_plotmath(as_spork('CHF_1'))))
x \%>\%
ggplot(aes(x = time, y = conc, color = Heart)) +
geom_point() +
facet_wrap(~Creatinine)





# Here we try a dataset with conditional labels and units.

file <- system.file(package = 'yamlet', 'extdata','phenobarb.csv')
x <- file \%>\% decorate
# Note that there are two elements each for value label and value guide.
#'
x \%>\% as_yamlet
x \%>\% as_yamlet(value)
x \%>\% resolve \%>\% as_yamlet(value)
# Guide might have been mistaken for an attempt to provide codes/decodes
# for a factor.  However, the keys evaluate to logical on the data.frame.
# Seeing that, we test for one of them being all true, and if so we select it.

x \%>\% ggplot(aes(x = time, y = value, color = event)) + geom_point()

# In the above example, we are plotting doses and concentrations, which have
# different labels and units, so we can't improve on the y axis label.
# But if we subset to just one of these, then only one of the named conditions
# will be always true (and will therefore be promoted).

file \%>\% decorate \%>\%
filter(event == 'conc') \%>\%
ggplot(aes(x = time, y = value, color = ApgarInd)) + geom_point()

file \%>\% decorate \%>\%
filter(event == 'dose') \%>\%
ggplot(aes(x = time, y = value, color = Wt)) +
geom_point() +
scale_y_log10() +
scale_color_gradientn(colours = rainbow(4))
}
\seealso{
Other decorated_ggplot: 
\code{\link{ggplot.decorated}()}
}
\concept{decorated_ggplot}
